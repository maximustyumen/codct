0.3
	- Исправлена ошибка с масштабированием при вызове Animatable:AnimateToState().
	- Добавлено наследование класса ClassObject от Animatable.
	- Добавлен синоним AbstractClassObject.Inherit = AbstractClassObject.InheritClass.
	- Добавлен синоим Eventable = EventAttributable.
0.4
	- Добавлено свойство RTI_Variables.isDebug.
	- Вместо привязки к MainTimer происходит привязка к STDLib_Timer.
	- Добавлено свойство ClassObject.methodsHash для перенаправления событий объекта.
	- Добавлен метод ClassObject.RedirectMethod(sender, method, object) для переопределения обработчика.
0.5
	- Исправлен метод AddState в файле ObjectClass (добавлен scale).
	- Добавлен метод ClassObject.EnableLightning (обертка над SetLightingEnable).
	- Добавлен метод ClassObject.MoveTo(sender, target) для перемещения sender к target без привязки.
	- Исправлен метод CHand.Release (obj->obejct).
	- Исправлен метод ClassObject.Show(sender, visible) visible по умолчанию true.
	- Исправлен Eventable.ConnectEA. В предикат добавлен параметр e.
	- Исправлен Eventable.EA_ProcessItem. В предикат добавлен параметр e.
	- Добавлено документирование методов работы с состояниями.
0.6
	- При вызове AnimateToState(state_index) по заврешении анимации устанавливается текущий stateIndex=state_index.
	- В ObjectClass.AttachTo второй параметр может быть объект сцены (не только std).
	- ObjectClass.AttachTo возвращает sender.
	- bug fixed. При вызове таймера с периодическим срабатываением не вызывалась cmdEnd. Исправлено.
	- bug fixed. ClassObject.ConnectEA не давал прикреплять несколько обработчиков отличающихся только предикатами.
	- Добавлен класс Undead для сохранения данных при перегрузке сцены с использованием файла.
	- Добавлен класс User для получения расстояния от пользователя до точки, от пользователя до объекта.
	- Добавлена возможность получить перемещение мышы в абсолютных координатах.
	- AbstractClassObject.Create задает self всегда, даже если подан 0.
	- Добавлен метод Global.GetUniqueName(name) дял получения уникального имени. Хорошо для создания кучи текстовых объектов.
	- added. Global.GetUniqueName(name) - получить уникальное имя с рпефиксом name.
	- bug fixed. При оотсутствии параметра receiverEA ConnectEA в ошибке писал senderEA.
	- Добавлены события EOver - наведение мыши и EOut - потеря фокуса мыши для ClassObject.
	- Global унаследован от Eventable, то есть теперь он может инициировать события RiseEvent
	- Добавлены события EOver(target) и EOut(target) объекту Global, где target - объект stdlib на который навели или убрали курсор.
	- Global.ShowMessage(text) -> Global.ShowMessage(text, isutf8) isutf8 - подан ли текст в формате utf8.
	- bug fixed. Global.ShowMessage защищен от подачи nil и любого мусора(таблицы, boolean, цифры).
	- bug fix. ClassObject.EnableLightning не работал из-за некорректной ссылки на объект.
	- Добавлена автоподстилка под текст сообщения. Для этого нужно прикреплять к проекту файлик Global_InfoText_plane.ive.
	- bug fixed. SetState не передавал в cmd и cmdNotAllowed sender.
	- В Hand добавлено свойство showOnRelease для автоматического отображения отпускаемого объекта (вызов Release).
	- Добавлено имя текста используемое в Global.ShowMessage - Global.InfoText.
	- Добавлен метод Global.ITSetFont(name) устанавливающий шрифт текста для вывода системного текста.
	- Добавлен объект LooksLike.Strelka(sender, dPos, dRot, range, speed) иммитирующий работу стрелки.
	- Добавлена возможность привязываться к событиям группы. Событие группы вызывается при возникновении события ее члена.
	- Вместо _PUSH, _USE, _RELEASE, _DRAG вызывать аналогичные PUSH, USE, RELEASE и DRAG.
	- Добавлена возможность показывать текст Global.ShowMessage с использованием некоторых эффектов.
	- Добавлена возможность менять цвет Global текста Global.ITSetColor(r,g,b)
	- Добавлена возможность менять прозрачность Global текста Global.ITSetOpacity(a)
	- Добавленаы переменные Global.kWidth, Global.kHeight, Global.kScale для масштабирования размеров по экрану к (10000*10000).
	- Добавлен класс CCinema для создания последовательности действий и их выполнения. Используется вместо рекурсвного вызова таймера после таймера.
	- ConnectEA(event, ...) Добавлена возможность подавать несколько событий в event, разделяя их ; например 'EPush;EUse'.
	- Исправлена ошибка при автоудалении таймера. Изменен способ удаления.
	- В качестве цели для ClassObject.MoveTo можно передавать имя 3d объекта, а не только stdlib.
	- В CCinema добавлена команда AddTimer(cmd, len), которая добавляет цикловую команду, а не просто таймаут.
	- В CCinema AddFrame(cmd, nil) добавляет команду, которая выполняется сразу же без таймаута.
	- Добавлена возможность прерывать цепь выполнения RaiseEvent. При срабатывании определенного события можно запретить выполнять остальные.
	
	- В пакет CPlasMenu перенесена кнопка button_md -> sender.btnMD.	
	- В CPlasMenu перенесена команда Activate(cmd), которая показывает button_md и задает команду нажатия. cmd может быть строкой или ссылкой на функцию.
	- В CPilon добавлен метод ActivatePath(path{}, message, cmdEnd) в который можно передавать несколько точек, автоматически активируемых по порядку.
	- В ClassObject добавлены методы Enable и Disable, для включения и отключения генерации соыбтий объектом (старый enabled = true).
	- ClassObject.Create() удаляет последний параметр mTarget и eTarget если он пустой.
	- В ClassObject добавлен метод Clone3D который клонирует все mTarget с новым именем и возвращает {eTargets - строка новых eTarget, mTargets - строка новых mTarget, new_name - созданный суффикс}.
	- В методе DisconnectEA исправлена ошибка из-за которой события не отвзяывались.
	- В метод DisconnectEA(sender, senderEA, ...) теперь можно подавать в качестве senderEA события через ; также как и ConnectEA.
	- Добавлен класс СScenario, позволяющий задавать последовательность действий и реакию на них в виде последовательности.
	- Bug fixed. При относительном масштабировании новое значение прибавлялось к старому, а должно умножаться. ClassScale.
	- Добавлена команда Global.EditText для редактирования текста.
	- Добавлен моргающий курсор при редактировании текста через Global.EditText(есть возможность менять его вид).
	- Добавлена возможность менять скорость течения времени (при использовании Global.AddTimer). Управляется парамтером (Global.timeSpeed)
	- Добавлена возможность передавать в сценарий пармтеры которые можно использовать внутри сценария через args или sender.args.
	- Добавлена возможность эмулировать работу звука (Global.emulateSound = true)
	- Добавлена возможность вставлять составные команды в scenario (And).
	- Добавлена возможность вставлять составные команды в scenario (Or).
	- Добавлена Команда StopSound, для остановки звука и перемотки в 0.
	- Перегружена команда PlaySound если имя звука начинается с #, то звук не играется, а просто выводится на консоль.
	- Перегружена команда PlaySound если звука в сцене нет, то плеер не выпадает, а просто выводится сообщение что звука нет.
	- В Scenario добавлена проверка на валидность команды. Если команда не верна, то выдается сообщение на консоль о том, что команда невалидна.
	- В Scenario добавлена проверка посылателя события на nil. Если посылатель nil, то выдается сообщение на консоль.
	- В Scenario добавлена возможность передавать параметры в Play. Параметры можно использовать в сценарии.
	- В Scenario добавлена возможность использовать параметры в качестве посылателя.
	- В Scenario добавлена возможность использовать параметры в качестве посылателя в составных событиях.
	- В CAnimationable добавлено событие EFinish, вызывается по завершении анимации.
	- В Scenario добавлена метод Skip(count) для пропуска команды.
	- В Scenario добавлена возможность синхронизации.
	- Добавлен клас синхронизатор, для синхронизации нескольких сценариев (либо других объектов).
	- Добавлено циклическое выполнение сценария.
	- Добавлено реверсивное выполнение сценария.
	- Добавлена возможность добавлять в сценарии подсценарии с определением параметров (упростило вызов повторяющегося блока кода).
	- В Scenario добавлен сигнал EFinishCycle - при завершении одного оборота (все шаги) и по завершении всего сценария.
	- В Scenario добавлен сигнал EFinishBlock - по завершении блока (совместно с AddBlockEnd()).
	- В Scenario добавлен метод AddBlockEnd(mustStop) который добавляет в сценарий сигнал завершения блока. Нужно для сложных схем. mustStop - надо ли выключать сценарий.
	
	- В Scenario при вызове Play() если args = nil, то берутся старые аргументы.
	- В Scenario добавлен метод SetArgs(args) устанавливающий аргументы сценария (так удобнее управлять и код локаничнее).
	- В scenario добавлено поле emulating для эмуляции прохождения. Если true, то сценарий выпоняется не ожидая действий пользователя (с паузой 1 секунду на каждое событие).
	

	* Переписан AddSub (с параметром - событие при котором считать подсценарий выполненым).	
	* Перенсти enabled в Eventable.
	
	* Добавить в scenario сигнал EStep для сообщения о каждом шаге ?	
	
	
	